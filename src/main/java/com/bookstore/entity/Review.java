package com.bookstore.entity;
// Generated May 22, 2018 5:46:15 AM by Hibernate Tools 5.2.10.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Review generated by hbm2java
 */
@Entity // 이 어노테이션은 이 클래스를 JPA 엔티티로 표시하며, 데이터베이스 테이블을 나타냅니다.
@Table(name = "review", catalog = "bookstoredb") // 이 엔티티에 대응하는 테이블의 이름과 카탈로그를 지정합니다.

@NamedQueries({ // 이 엔티티에 대한 명명된 쿼리들의 그룹입니다.
    // 리뷰를 모두 검색하되 리뷰 시간을 기준으로 내림차순으로 정렬하는 명명된 쿼리입니다.
    @NamedQuery(name = "Review.listAll", query = "SELECT r FROM Review r ORDER BY r.reviewTime DESC"),

    // 데이터베이스에 있는 모든 리뷰의 개수를 계산하는 명명된 쿼리입니다.
    @NamedQuery(name = "Review.countAll", query = "SELECT COUNT(r) FROM Review r"),

    // 특정 고객과 책에 대한 리뷰를 찾는 명명된 쿼리입니다.
    @NamedQuery(name = "Review.findByCustomerAndBook", 
        query = "SELECT r FROM Review r WHERE r.customer.customerId = :customerId "
                + "AND r.book.bookId = :bookId"),

    // 평균 평점을 기준으로 가장 선호되는 책을 검색하는 명명된 쿼리입니다.
    @NamedQuery(name = "Review.mostFavoredBooks",
        query = "SELECT r.book, COUNT(r.book.bookId) AS ReviewCount, AVG(r.rating) as AvgRating FROM Review r "
                + "GROUP BY r.book.bookId HAVING AVG(r.rating) >= 4.0 "
                + "ORDER BY ReviewCount DESC, AvgRating DESC"),
    
 // Review 클래스에 명명된 쿼리 추가
    @NamedQuery(name = "Review.countByCustomer",
                query = "SELECT COUNT(r.reviewId) FROM Review r WHERE r.customer.customerId = :customerId")

    //NamedQuery 어노테이션은 JPA(Java Persistence API)에서 사용되며, 이름이 "Review.countByCustomer"인 명명된 쿼리를 Review 엔티티 클래스에 추가합니다. 이 쿼리는 Review 엔티티의 데이터베이스에서 특정 고객이 작성한 리뷰의 수를 계산하는데 사용됩니다. 쿼리는 Review 엔티티의 customer 속성의 customerId와 매개변수로 전달된 customerId를 비교하여 해당 고객이 작성한 리뷰의 수를 세는 역할을 합니다.
    
})

public class Review implements java.io.Serializable {

	private Integer reviewId; // 리뷰 ID를 나타내는 변수입니다.
	private Book book; // 리뷰와 연관된 책을 나타내는 변수입니다.
	private Customer customer; // 리뷰를 작성한 고객을 나타내는 변수입니다.
	private int rating; // 리뷰 평점을 나타내는 변수입니다.
	private String headline; // 리뷰 제목을 나타내는 변수입니다.
	private String comment; // 리뷰 내용을 나타내는 변수입니다.
	private Date reviewTime; // 리뷰가 작성된 시간을 나타내는 변수입니다.

	public Review() {
	    // 기본 생성자
	}

	public Review(Book book, Customer customer, int rating, String headline, String comment, Date reviewTime) {
	    // 매개변수를 받는 생성자
	    this.book = book;
	    this.customer = customer;
	    this.rating = rating;
	    this.headline = headline;
	    this.comment = comment;
	    this.reviewTime = reviewTime;
	}

	@Id // 리뷰 ID를 나타내는 변수인 reviewId를 식별자로 설정합니다.
	@GeneratedValue(strategy = IDENTITY) // IDENTITY 전략을 사용하여 자동으로 ID를 생성합니다.

	@Column(name = "review_id", unique = true, nullable = false)
	public Integer getReviewId() {
	    return this.reviewId;
	}

	public void setReviewId(Integer reviewId) {
	    this.reviewId = reviewId;
	}


	@ManyToOne(fetch = FetchType.EAGER) // 매핑 방식을 정의하며, 책(book)과 다대일(N:1) 관계를 나타냅니다. EAGER로 설정하여 즉시 로딩을 수행합니다.
	@JoinColumn(name = "book_id", nullable = false) // book_id 컬럼과 매핑되며, NULL을 허용하지 않는 외래 키 제약 조건을 나타냅니다.
	public Book getBook() {
	    return this.book;
	}

	public void setBook(Book book) {
	    this.book = book;
	}

	@ManyToOne(fetch = FetchType.EAGER) // 매핑 방식을 정의하며, 고객(customer)과 다대일(N:1) 관계를 나타냅니다. EAGER로 설정하여 즉시 로딩을 수행합니다.
	@JoinColumn(name = "customer_id", nullable = false) // customer_id 컬럼과 매핑되며, NULL을 허용하지 않는 외래 키 제약 조건을 나타냅니다.
	public Customer getCustomer() {
	    return this.customer;
	}

	public void setCustomer(Customer customer) {
	    this.customer = customer;
	}

	@Column(name = "rating", nullable = false) // rating 컬럼을 나타냅니다. NULL을 허용하지 않고, 반드시 값을 가져야 합니다.
	public int getRating() {
	    return this.rating;
	}

	public void setRating(int rating) {
	    this.rating = rating;
	}

	@Column(name = "headline", nullable = false, length = 128) // headline 컬럼을 나타내며, NULL을 허용하지 않으며 최대 길이는 128자로 설정됩니다.
	public String getHeadline() {
	    return this.headline;
	}

	public void setHeadline(String headline) {
	    this.headline = headline;
	}

	@Column(name = "comment", nullable = false, length = 500) // comment 컬럼을 나타내며, NULL을 허용하지 않으며 최대 길이는 500자로 설정됩니다.
	public String getComment() {
	    return this.comment;
	}

	public void setComment(String comment) {
	    this.comment = comment;
	}

	@Temporal(TemporalType.TIMESTAMP) // 시간과 날짜 정보를 포함하는 reviewTime 필드에 TemporalType.TIMESTAMP 타입으로 매핑합니다.
	@Column(name = "review_time", nullable = false, length = 19) // review_time 컬럼을 나타내며, NULL을 허용하지 않고 길이는 19로 설정됩니다.
	public Date getReviewTime() {
	    return this.reviewTime;
	}

	public void setReviewTime(Date reviewTime) {
	    this.reviewTime = reviewTime;
	}

	@Transient // 데이터베이스와 매핑되지 않는 필드를 나타냅니다.
	public String getStars() {
	    String result = "";

	    int numberOfStarsOn = (int) rating; // 평점을 정수형으로 변환하여 별 개수를 계산합니다.

	    for (int i = 1; i <= numberOfStarsOn; i++) { // 별점을 on으로 설정합니다.
	        result += "on,";
	    }

	    for (int j = numberOfStarsOn + 1; j <= 5; j++) { // 나머지 별점을 off로 설정합니다.
	        result += "off,";
	    }

	    return result.substring(0, result.length() - 1); // 마지막 쉼표를 제외한 별점 문자열을 반환합니다.
	}

}
